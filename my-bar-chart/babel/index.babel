const width = 1000;
const height = 500;
const padding = 60;
const paddingRight = 30;
const paddingBottom = 30;
let dataset;

const svg = d3.select("body")
  .append("svg")
  .attr("width", width + padding + paddingRight)
  .attr("height", height + paddingBottom);

d3.json('https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/GDP-data.json', function(err, json) {

  dataset = json.data;
  const barWidth = width / dataset.length;

  const minDate = new Date(dataset[0][0]);
  const maxDate = new Date(dataset[dataset.length - 1][0]);

  // Define Scales

  const xScale = d3.scaleTime()
    .domain([minDate, maxDate])
    .range([padding, width + padding]);
  const yScale = d3.scaleLinear()
    .domain([d3.min(dataset, (d) => d[1]), d3.max(dataset, (d) => d[1])])
    .range([height - paddingBottom, paddingBottom]);

  // Draw Data

  d3.select('svg').selectAll('rect')
    .data(dataset)
    .enter()
    .append('rect')
    .attr('x', (d, i) => padding + (i * barWidth))
    .attr('y', (d) => yScale(d[1]))
    .attr('width', barWidth)
    .attr('height', (d) => yScale(0) - yScale(d[1]))
    .attr('data-date', function(d, i) {
      return data.data[i][0]
    })
    .attr('data-gdp', function(d, i) {
      return data.data[i][1]
    });

  const yAxis = d3.axisLeft(yScale);
  svg.append("g")
    .attr("transform", "translate(" + padding + "," + (5) + ")")
    .call(yAxis)
    .attr('id', 'y-axis');

  const xAxis = d3.axisBottom(xScale);
  svg.append("g")
    .attr("transform", "translate(0" + "," + (height - paddingBottom + 5) + ")")
    .call(xAxis)
    .attr('id', 'x-axis');
});